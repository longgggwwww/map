generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int               @id @default(autoincrement())
  username             String            @unique
  password             String
  type                 Int               @default(0)
  isActive             Boolean           @default(false)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  createdCategories    Category[]
  log                  Log[]
  createdPermissions   Permission[]
  createdGroups        PermissionGroup[]
  personal             Personal?
  myPlaces             Place[]
  reviews              Review[]
  createdRoles         Role[]            @relation("createdBy")
  createdsubCategories SubCategory[]
  roles                Role[]            @relation("RoleToUser")
}

model Personal {
  id         Int       @id @default(autoincrement())
  userId     Int       @unique
  email      String?   @unique
  phone      String?   @unique
  fullName   String?
  birthday   DateTime?
  gender     Boolean?
  address    String?
  image      String?
  positionId Int?
  wardId     Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  position   Position? @relation(fields: [positionId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
  ward       Ward?     @relation(fields: [wardId], references: [id])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  code        String       @unique
  createdById Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   User?        @relation("createdBy", fields: [createdById], references: [id])
  permissions Permission[] @relation("PermissionToRole")
  users       User[]       @relation("RoleToUser")
}

model PermissionGroup {
  id          Int          @id @default(autoincrement())
  name        String
  createdById Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[]
  createdBy   User?        @relation(fields: [createdById], references: [id])
}

model Permission {
  id          Int             @id @default(autoincrement())
  label       String
  code        String          @unique
  groupId     Int
  createdById Int?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   User?           @relation(fields: [createdById], references: [id])
  group       PermissionGroup @relation(fields: [groupId], references: [id])
  roles       Role[]          @relation("PermissionToRole")
}

model Company {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  phone       String       @unique
  tax         String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  departments Department[]
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String
  code      String     @unique
  companyId Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  company   Company    @relation(fields: [companyId], references: [id])
  positions Position[]
}

model Position {
  id           Int        @id @default(autoincrement())
  name         String
  code         String     @unique
  departmentId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  persons      Personal[]
  department   Department @relation(fields: [departmentId], references: [id])
}

model Province {
  id        Int        @id @default(autoincrement())
  name      String
  code      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  districts District[]
}

model District {
  id         Int      @id @default(autoincrement())
  name       String
  code       String   @unique
  provinceId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  province   Province @relation(fields: [provinceId], references: [id])
  wards      Ward[]
}

model Ward {
  id         Int        @id @default(autoincrement())
  name       String
  code       String     @unique
  districtId Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  persons    Personal[]
  places     Place[]
  district   District   @relation(fields: [districtId], references: [id])
}

model Log {
  id        Int      @id @default(autoincrement())
  userId    Int
  method    String
  url       String
  content   String?
  time      BigInt
  ip        String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model SubCategory {
  id          Int        @id @default(autoincrement())
  name        String
  createdById Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categories  Category[]
  createdBy   User?      @relation(fields: [createdById], references: [id])
}

model Category {
  id            Int          @id @default(autoincrement())
  name          String
  subCategoryId Int?
  color         String?
  icon          String?
  createdById   Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdBy     User?        @relation(fields: [createdById], references: [id])
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  places        Place[]
}

model Place {
  id          Int       @id @default(autoincrement())
  name        String
  categoryId  Int?
  wardId      Int?
  photos      String[]
  address     String?
  description String?
  email       String?
  phone       String?
  website     String?
  lng         Float
  lat         Float
  status      Int       @default(0)
  createdById Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category? @relation(fields: [categoryId], references: [id])
  createdBy   User?     @relation(fields: [createdById], references: [id])
  ward        Ward?     @relation(fields: [wardId], references: [id])
  reviews     Review[]
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  placeId   Int
  content   String
  stars     Int
  photos    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  place     Place    @relation(fields: [placeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model PlaceTmp {
  id          Int      @id @default(autoincrement())
  placeId     Int
  name        String
  categoryId  Int?
  wardId      Int?
  photos      String[]
  address     String?
  description String?
  email       String?
  phone       String?
  website     String?
  lng         Float
  lat         Float
  status      Int      @default(0)
  createdById Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ReviewTmp {
  id        Int      @id @default(autoincrement())
  reviewId  Int
  userId    Int
  placeId   Int
  content   String
  stars     Int
  photos    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
